############################################################################
# VOICE FUNCTIONS
############################################################################


@bot.event
async def on_voice_state_update(member, before, after):
    """Auto-disconnect when bot is alone in voice channel"""
    if member == bot.user:
        return
    
    voice_client = discord.utils.get(bot.voice_clients, guild=member.guild)
    if voice_client and voice_client.channel:
        # Check if bot is alone in the voice channel
        if len(voice_client.channel.members) == 1:  # Only the bot
            await asyncio.sleep(60)  # Wait 1 minute
            # Double check if still alone
            if voice_client.is_connected() and len(voice_client.channel.members) == 1:
                await voice_client.disconnect()
                if member.guild.id in music_queues:
                    music_queues[member.guild.id].clear()
                print(f"üîá Left {voice_client.channel.name} (alone in channel)")

# ========================================
# VOICE COMMANDS
# ========================================

@bot.command(name='join', aliases=['connect', 'j'])
async def join_voice(ctx):
    """Join the voice channel you're in"""
    if not ctx.author.voice:
        embed = discord.Embed(
            title="‚ùå Error", 
            description="You need to be in a voice channel!", 
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
    
    channel = ctx.author.voice.channel
    
    if ctx.voice_client:
        if ctx.voice_client.channel == channel:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Info", 
                description="Already connected to this channel!", 
                color=discord.Color.blue()
            )
            return await ctx.send(embed=embed)
        await ctx.voice_client.move_to(channel)
    else:
        await channel.connect()
    
    embed = discord.Embed(
        title="üéµ Connected!", 
        description=f"Joined **{channel.name}**", 
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)

@bot.command(name='leave', aliases=['disconnect', 'dc'])
async def leave_voice(ctx):
    """Leave the voice channel"""
    if not ctx.voice_client:
        embed = discord.Embed(
            title="‚ùå Error", 
            description="I'm not connected to a voice channel!", 
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
    
    # Clear the queue
    if ctx.guild.id in music_queues:
        music_queues[ctx.guild.id].clear()
    
    await ctx.voice_client.disconnect()
    embed = discord.Embed(
        title="üëã Disconnected", 
        description="Left the voice channel!", 
        color=discord.Color.orange()
    )
    await ctx.send(embed=embed)

@bot.command(name='play', aliases=['p'])
async def play_music(ctx, *, search):
    """Play music from YouTube"""
    # Join voice channel if not connected
    if not ctx.voice_client:
        if ctx.author.voice:
            await ctx.author.voice.channel.connect()
        else:
            embed = discord.Embed(
                title="‚ùå Error", 
                description="You need to be in a voice channel!", 
                color=discord.Color.red()
            )
            return await ctx.send(embed=embed)
    
    # Initialize queue if it doesn't exist
    if ctx.guild.id not in music_queues:
        music_queues[ctx.guild.id] = []
    
    # Show loading message
    loading_embed = discord.Embed(
        title="üîÑ Loading...", 
        description=f"Searching for: **{search}**", 
        color=discord.Color.yellow()
    )
    message = await ctx.send(embed=loading_embed)
    
    try:
        # Get the song
        player = await YTDLSource.from_url(search, loop=bot.loop, stream=True)
        
        # Add to queue
        music_queues[ctx.guild.id].append(player)
        
        # Update embed
        embed = discord.Embed(
            title="‚úÖ Added to Queue", 
            description=f"**{player.title}**", 
            color=discord.Color.green()
        )
        embed.add_field(name="Position in Queue", value=len(music_queues[ctx.guild.id]), inline=True)
        if player.thumbnail:
            embed.set_thumbnail(url=player.thumbnail)
        
        await message.edit(embed=embed)
        
        # Start playing if nothing is currently playing
        if not ctx.voice_client.is_playing():
            await play_next(ctx)
            
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå Error", 
            description=f"Could not play: {str(e)}", 
            color=discord.Color.red()
        )
        await message.edit(embed=error_embed)

async def play_next(ctx):
    """Play the next song in queue"""
    if ctx.guild.id not in music_queues or not music_queues[ctx.guild.id]:
        return
    
    if ctx.voice_client and not ctx.voice_client.is_playing():
        player = music_queues[ctx.guild.id].pop(0)
        current_playing[ctx.guild.id] = player
        
        def after_playing(error):
            if error:
                print(f'Player error: {error}')
            
            # Play next song
            coro = play_next(ctx)
            fut = asyncio.run_coroutine_threadsafe(coro, bot.loop)
            try:
                fut.result()
            except:
                pass
        
        ctx.voice_client.play(player, after=after_playing)
        
        # Now playing embed
        embed = discord.Embed(
            title="üéµ Now Playing", 
            description=f"**{player.title}**", 
            color=discord.Color.purple()
        )
        if player.thumbnail:
            embed.set_thumbnail(url=player.thumbnail)
        embed.add_field(name="Remaining in Queue", value=len(music_queues[ctx.guild.id]), inline=True)
        
        await ctx.send(embed=embed)

@bot.command(name='skip', aliases=['s', 'next'])
async def skip_song(ctx):
    """Skip the current song"""
    if not ctx.voice_client or not ctx.voice_client.is_playing():
        embed = discord.Embed(
            title="‚ùå Error", 
            description="Nothing is currently playing!", 
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
    
    ctx.voice_client.stop()
    embed = discord.Embed(
        title="‚è≠Ô∏è Skipped", 
        description="Skipped to next song!", 
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed)

@bot.command(name='pause')
async def pause_song(ctx):
    """Pause the current song"""
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.pause()
        embed = discord.Embed(
            title="‚è∏Ô∏è Paused", 
            description="Music paused!", 
            color=discord.Color.yellow()
        )
        await ctx.send(embed=embed)

@bot.command(name='resume')
async def resume_song(ctx):
    """Resume the paused song"""
    if ctx.voice_client and ctx.voice_client.is_paused():
        ctx.voice_client.resume()
        embed = discord.Embed(
            title="‚ñ∂Ô∏è Resumed", 
            description="Music resumed!", 
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)

@bot.command(name='stop')
async def stop_music(ctx):
    """Stop music and clear queue"""
    if ctx.voice_client:
        if ctx.guild.id in music_queues:
            music_queues[ctx.guild.id].clear()
        ctx.voice_client.stop()
        embed = discord.Embed(
            title="‚èπÔ∏è Stopped", 
            description="Music stopped and queue cleared!", 
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='queue', aliases=['q'])
async def show_queue(ctx):
    """Show the music queue"""
    if ctx.guild.id not in music_queues or not music_queues[ctx.guild.id]:
        embed = discord.Embed(
            title="üìú Queue Empty", 
            description="No songs in queue!", 
            color=discord.Color.blue()
        )
        return await ctx.send(embed=embed)
    
    queue_list = []
    for i, player in enumerate(music_queues[ctx.guild.id][:10], 1):  # Show first 10
        queue_list.append(f"**{i}.** {player.title}")
    
    embed = discord.Embed(
        title="üìú Music Queue", 
        description="\n".join(queue_list), 
        color=discord.Color.purple()
    )
    
    if len(music_queues[ctx.guild.id]) > 10:
        embed.add_field(name="+ More", value=f"{len(music_queues[ctx.guild.id]) - 10} more songs...", inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='nowplaying', aliases=['np'])
async def now_playing(ctx):
    """Show currently playing song"""
    if ctx.guild.id not in current_playing:
        embed = discord.Embed(
            title="‚ùå Nothing Playing", 
            description="No song is currently playing!", 
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
    
    player = current_playing[ctx.guild.id]
    embed = discord.Embed(
        title="üéµ Now Playing", 
        description=f"**{player.title}**", 
        color=discord.Color.purple()
    )
    if player.thumbnail:
        embed.set_thumbnail(url=player.thumbnail)
    
    await ctx.send(embed=embed)

@bot.command(name='volume', aliases=['vol'])
async def change_volume(ctx, volume: int = None):
    """Change or show the volume (0-100)"""
    if not ctx.voice_client:
        embed = discord.Embed(
            title="‚ùå Error", 
            description="Not connected to voice channel!", 
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
    
    if volume is None:
        current_vol = int(ctx.voice_client.source.volume * 100) if hasattr(ctx.voice_client.source, 'volume') else 50
        embed = discord.Embed(
            title="üîä Current Volume", 
            description=f"Volume is at **{current_vol}%**", 
            color=discord.Color.blue()
        )
        return await ctx.send(embed=embed)
    
    if 0 <= volume <= 100:
        if hasattr(ctx.voice_client.source, 'volume'):
            ctx.voice_client.source.volume = volume / 100
            embed = discord.Embed(
                title="üîä Volume Changed", 
                description=f"Volume set to **{volume}%**", 
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå Error", 
            description="Volume must be between 0 and 100!", 
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='clear')
async def clear_queue(ctx):
    """Clear the music queue"""
    if ctx.guild.id in music_queues:
        music_queues[ctx.guild.id].clear()
        embed = discord.Embed(
            title="üóëÔ∏è Queue Cleared", 
            description="Music queue has been cleared!", 
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)

# ========================================
# HELP COMMAND
# ========================================
@bot.command(name='musichelp', aliases=['mhelp'])
async def music_help(ctx):
    """Show music commands"""
    embed = discord.Embed(
        title="üéµ Music Bot Commands", 
        color=discord.Color.purple()
    )
    
    commands_list = [
        "**!join** - Join your voice channel",
        "**!leave** - Leave voice channel",
        "**!play <song>** - Play a song from YouTube",
        "**!pause** - Pause current song",
        "**!resume** - Resume paused song",
        "**!skip** - Skip current song",
        "**!stop** - Stop music and clear queue",
        "**!queue** - Show music queue",
        "**!nowplaying** - Show current song",
        "**!volume <0-100>** - Change volume",
        "**!clear** - Clear queue"
    ]
    
    embed.description = "\n".join(commands_list)
    embed.set_footer(text="Use !play <song name or URL> to start!")
    
    await ctx.send(embed=embed)

# ========================================
# ERROR HANDLING
# ========================================
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(
            title="‚ùå Missing Argument", 
            description="Please provide the required arguments!", 
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        print(f"Error: {error}")

